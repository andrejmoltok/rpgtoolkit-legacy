///////////////////////////////////////////////////////////////////////////
//All contents copyright 2004, Colin James Fitzpatrick (KSNiloc)
//All rights reserved.  YOU MAY NOT REMOVE THIS NOTICE.
//Read LICENSE.txt for licensing info
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// String class (fast!)
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// Inlusions
///////////////////////////////////////////////////////////////////////////
#include "inlineString.h"		//Contains integral stuff for this file
#include <string.h>				//For strings

///////////////////////////////////////////////////////////////////////////
// Get the length of the inlineString
///////////////////////////////////////////////////////////////////////////
int inlineString::len()
{
	return strlen(contents);
}

///////////////////////////////////////////////////////////////////////////
// Get character(s) from the inlineString
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::mid(int start, int length)
{
	inlineString toRet; int pos = 0; int chrIdx = 0;
	for (chrIdx = (start - 1); chrIdx <= ((start - 1) + (length - 1)); chrIdx++)
	{
		toRet.setBinary(contents[chrIdx], pos);
		pos++;
	}
	toRet.setBinary((unsigned char)'/0', pos);
	for (chrIdx = pos; chrIdx <= len(); chrIdx++)
	{
		toRet.setBinary(NULL, chrIdx);
	}
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// Copy string to new memory (ideal to use as return value)
///////////////////////////////////////////////////////////////////////////
void inlineString::newMem(char* theNewMem)
{
	//Just copy over the contents array
	strcpy(theNewMem, contents);
}

///////////////////////////////////////////////////////////////////////////
// Return SizeOf() inlineString
///////////////////////////////////////////////////////////////////////////
int inlineString::size()
{
	return sizeof(contents);
}

///////////////////////////////////////////////////////////////////////////
// Set a binary value in the contents array
///////////////////////////////////////////////////////////////////////////
void inlineString::setBinary(unsigned char text, int pos)
{
	contents[pos] = text;
}

///////////////////////////////////////////////////////////////////////////
//Get a binary value from the contents array
///////////////////////////////////////////////////////////////////////////
char inlineString::getBinary(int pos)
{
	return contents[pos];
}

///////////////////////////////////////////////////////////////////////////
// This is the class' constructor
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString()
{
	//Set an initial value for the inlineString
	strcpy(contents, "");
}

///////////////////////////////////////////////////////////////////////////
// This constructor sets an initial value
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString(char* defaultVal)
{
	//just copy the memory over
	strcpy(contents, defaultVal);
}

///////////////////////////////////////////////////////////////////////////
// This is the + operator overloader
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (inlineString &toAdd)
{
	inlineString toRet = value();
	strcat(toRet.value(), toAdd.value());
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// This is another + operator overloader
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (char* toAdd)
{
	inlineString toRet = value();
	strcat(toRet.value(), toAdd);
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// This is still another + operator overloader
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (char toAdd)
{
	inlineString toRet = value();
	strcat(toRet.value(), (char*)toAdd);
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// This is the = operator overloader
///////////////////////////////////////////////////////////////////////////
inlineString::operator = (char* text)
{
	strcpy(contents, text);
}

///////////////////////////////////////////////////////////////////////////
// This is another = operator overloader
///////////////////////////////////////////////////////////////////////////
inlineString::operator = (char text)
{
	strcpy(contents, (char*)text);
}

///////////////////////////////////////////////////////////////////////////
// Determine if the inlineString contains a sub-inlineString
///////////////////////////////////////////////////////////////////////////
bool inlineString::contains(char* text)
{
	return (!(strcmp(value(), text)));
}

///////////////////////////////////////////////////////////////////////////
// This returns the contents of the inlineString
///////////////////////////////////////////////////////////////////////////
char* inlineString::value()
{
	return (char*)contents;
}