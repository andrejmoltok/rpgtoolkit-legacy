///////////////////////////////////////////////////////////////////////////
//All contents copyright 2004, Colin James Fitzpatrick (KSNiloc)
//All rights reserved.  YOU MAY NOT REMOVE THIS NOTICE.
//Read LICENSE.txt for licensing info
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// String class (fast!)
///////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////
// Inlusions
///////////////////////////////////////////////////////////////////////////
#include "inlineString.h"		//Contains integral stuff for this file

///////////////////////////////////////////////////////////////////////////
// Get the length of the inlineString
///////////////////////////////////////////////////////////////////////////
int inlineString::len()
{
	//just use standard string manipulation
	return strlen(contents);
}

///////////////////////////////////////////////////////////////////////////
// Construct the string from an STL string
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString(std::string cFrom)
{
	//cast the STL string to char* and copy that memory to this string
	strcpy(contents, cFrom.c_str());
}

///////////////////////////////////////////////////////////////////////////
// Get character(s) from the inlineString
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::mid(int start, int length)
{

	inlineString toRet;		//string to return
	int pos = 0;			//position in string
	int chrIdx = 0;			//character index

	//set in the characters
	for (chrIdx = (start - 1); chrIdx <= ((start - 1) + (length - 1)); chrIdx++)
	{
		toRet[pos] = (unsigned char)contents[chrIdx];
		pos++;
	}

	//set in the escape sequence (signals end of the string)
	toRet[pos] = '/0';

	//fill in the rest with NULL
	for (chrIdx = pos; chrIdx <= len(); chrIdx++)
	{
		toRet[chrIdx] = NULL;
	}

	//return the result
	return toRet;

}

///////////////////////////////////////////////////////////////////////////
// Copy string to new memory (ideal to use as return value)
///////////////////////////////////////////////////////////////////////////
void inlineString::newMem(char* theNewMem)
{
	//Just copy over the contents array
	strcpy(theNewMem, contents);
}

///////////////////////////////////////////////////////////////////////////
// This is the class' constructor
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString()
{
	//Set an initial value for the inlineString
	strcpy(contents, "");
}

///////////////////////////////////////////////////////////////////////////
// This constructor sets an initial value
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString(char* defaultVal)
{
	//just copy the memory over
	strcpy(contents, defaultVal);
}

///////////////////////////////////////////////////////////////////////////
// Construct from a character
///////////////////////////////////////////////////////////////////////////
inlineString::inlineString(char defaultVal)
{
	//just copy the memory over
	strcpy(contents, (char*)defaultVal);
}

///////////////////////////////////////////////////////////////////////////
// + another inlineString
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (inlineString &toAdd)
{
	inlineString toRet = (char*)this;
	strcat((char*)toRet, (char*)toAdd);
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// + a pointer to a string
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (char* toAdd)
{
	inlineString toRet = (char*)this;
	strcat((char*)toRet, toAdd);
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// + a character
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (char toAdd)
{
	inlineString toRet = (char*)this;
	strcat((char*)toRet, (char*)toAdd);
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// = a pointer to a string
///////////////////////////////////////////////////////////////////////////
inlineString::operator = (char* text)
{
	strcpy(contents, text);
}

///////////////////////////////////////////////////////////////////////////
// = a character
///////////////////////////////////////////////////////////////////////////
inlineString::operator = (char text)
{
	strcpy(contents, (char*)text);
}

///////////////////////////////////////////////////////////////////////////
// Determine if the inlineString contains a sub-pointer to a string
///////////////////////////////////////////////////////////////////////////
bool inlineString::contains(char* text)
{
	return (!(strcmp((char*)this, text)));
}

///////////////////////////////////////////////////////////////////////////
// Determine if the inlineString contains a sub-inlineString
///////////////////////////////////////////////////////////////////////////
bool inlineString::contains(inlineString text)
{
	return (!(strcmp((char*)this, (char*)text)));
}

///////////////////////////////////////////////////////////////////////////
// Determine if the inlineString contains a sub-STL string
///////////////////////////////////////////////////////////////////////////
bool inlineString::contains(std::string text)
{
	return (!(strcmp((char*)this, text.c_str())));
}

///////////////////////////////////////////////////////////////////////////
// Cast to char*
///////////////////////////////////////////////////////////////////////////
inlineString::operator char*()
{
	return (char*)contents;
}

///////////////////////////////////////////////////////////////////////////
// Cast to std::string
///////////////////////////////////////////////////////////////////////////
inlineString::operator std::string()
{
	std::string toRet = (char*)contents;
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// Get a binary value from the contents array
///////////////////////////////////////////////////////////////////////////
unsigned char& inlineString::operator [] (int pos)
{
	return (unsigned char&)contents[pos];
}

///////////////////////////////////////////////////////////////////////////
// + an STL string
///////////////////////////////////////////////////////////////////////////
inlineString inlineString::operator + (std::string toAdd)
{
	inlineString toRet = (char*)this;
	strcat((char*)toRet, toAdd.c_str());
	return toRet;
}

///////////////////////////////////////////////////////////////////////////
// = an STL string
///////////////////////////////////////////////////////////////////////////
inlineString::operator = (std::string cFrom)
{
	//cast the STL string to char* and copy that memory to this string
	strcpy(contents, cFrom.c_str());
}

///////////////////////////////////////////////////////////////////////////
// += a pointer to a string
///////////////////////////////////////////////////////////////////////////
inlineString::operator += (char* toAdd)
{
	strcat((char*)this, toAdd);
}

///////////////////////////////////////////////////////////////////////////
// += an inlineString
///////////////////////////////////////////////////////////////////////////
inlineString::operator += (inlineString toAdd)
{
	strcat((char*)this, (char*)toAdd);
}

///////////////////////////////////////////////////////////////////////////
// += an STL string
///////////////////////////////////////////////////////////////////////////
inlineString::operator += (std::string toAdd)
{
	strcat((char*)this, toAdd.c_str());
}

///////////////////////////////////////////////////////////////////////////
// += a character
///////////////////////////////////////////////////////////////////////////
inlineString::operator += (char toAdd)
{
	strcat((char*)this, (char*)toAdd);
}