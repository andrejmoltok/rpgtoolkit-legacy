/*
 * All contents copyright 2005, Colin James Fitzpatrick.
 * All rights reserved. You may not remove this notice.
 * Read license.txt for licensing details.
 *
 ***********************************************************
 *
 * LALR(1) RPGCode grammar. Produce a series of machine
 * instruction units from the RPGCode source.
 *
 * This grammar has some reduce/reduce conflicts. These
 * are my fault. I tried to depend on context in context-free
 * grammar. But fixing them is tricky and the default
 * resolution works fine. If you can resolve them
 * properly, go ahead.
 *
 */

%start	begin
%expect	42

%token	MUL_ASSIGN DIV_ASSIGN MOD_ASSIGN ADD_ASSIGN
%token	SUB_ASSIGN LS_ASSIGN RS_ASSIGN AND_ASSIGN
%token	OR_ASSIGN POW_ASSIGN XOR_ASSIGN EQ IEQ MEM
%token	MUL ADD SUB NOT BNOT DIV MOD LS RS LTE GTE
%token	LT GT AND POW XOR OR LAND LOR ASSIGN INC DEC
%token	SEMICOLON IDENTIFIER NUMBER STRING LPARAN RPARAN
%token	LARRAY RARRAY LCURL RCURL LIT FOR COMMA
%token	QUESTION COLON METHOD RETURN HIGHEST
%token	CLASS STRUCT PUBLIC PRIVATE VAR DOT INCLUDE
%token	REDIRECT KILL_REDIRECT KILL_ALL_REDIRECTS

%right	XOR_ASSIGN
%right	OR_ASSIGN
%right	AND_ASSIGN
%right	RS_ASSIGN
%right	LS_ASSIGN
%right	SUB_ASSIGN
%right	ADD_ASSIGN
%right	MOD_ASSIGN
%right	DIV_ASSIGN
%right	MUL_ASSIGN
%right	POW_ASSIGN
%right	ASSIGN
%right	CONDITIONAL QUESTION COLON
%left	LOR
%left	LAND
%left	OR
%left	XOR
%left	AND
%left	IEQ
%left	EQ
%left	GTE
%left	LTE
%left	GT
%left	LT
%left	RS
%left	LS
%left	SUB
%left	ADD
%left	MOD
%left	DIV
%left	MUL
%left	POW
%left	MEM
%left	NOT
%left	NEG
%left	PREF_DEC
%left	PREF_INC
%left	POST_DEC
%left	POST_INC
%left	LPARAN RPARAN
%left	LARRAY RARRAY
%left	HIGHEST

%{

#define _MACHINE_UNIT(_func, _params) \
	{ \
		MACHINE_UNIT mu; \
		mu.func = _func; \
		mu.params = _params; \
		mu.udt = UDT_FUNC; \
		CProgram::m_pyyUnits->push_back(mu); \
	}

#define _END_LINE CProgram::m_pyyUnits->back().udt = UNIT_DATA_TYPE(CProgram::m_pyyUnits->back().udt | UDT_LINE)

#define _FOUND_PARAM ++CProgram::m_params.back()

%}

%%

tdc:
	LIT
|	NOT
|	/* No TDC. */
	{ }
;

/*
 * These identifier rules must stay above the operators rule.
 */

var_identifier:
	function_identifier tdc
		{
			MACHINE_UNIT mu;
			if (g_methods.size() && g_methods.back().count($1.getLit()))
			{
				(mu.lit = _T(" ")) += char(g_methods.back()[$1.getLit()] + 1);
			}
			else
			{
				mu.lit = $1.getLit();
			}
			mu.udt = UDT_ID;
			CProgram::m_pyyUnits->push_back(mu);
		}
;

identifier:
	var_identifier
|	identifier LARRAY value RARRAY tdc
		{ _MACHINE_UNIT(operators::array, 2); }
|	LPARAN identifier RPARAN
|	value MEM function
		{
			/** MACHINE_UNIT &mu = *(CProgram::m_pyyUnits->end() - CProgram::m_pyyUnits->back().params - 2);
			mu.udt = UNIT_DATA_TYPE(mu.udt | UDT_OBJ); **/
			if (CProgram::m_pyyUnits->back().func == CProgram::methodCall)
			{
				MACHINE_UNIT &name = *(CProgram::m_pyyUnits->end() - 2);
				name.udt = UNIT_DATA_TYPE(name.udt | UDT_OBJ);
				//CProgram::debugger(name.lit);
			} /**else { CProgram::debugger(CProgram::getFunctionName(CProgram::m_pyyUnits->back().func)); }**/
			++CProgram::m_pyyUnits->back().params;
		}
|	value MEM var_identifier
		{ _MACHINE_UNIT(operators::member, 2); }
|	function
;

value:
	_value
|	identifier
;

_value:
	LPARAN _value RPARAN
|	operators
|	NUMBER
		{
			MACHINE_UNIT mu;
			mu.num = $1.getNum();
			mu.udt = UDT_NUM;
			CProgram::m_pyyUnits->push_back(mu);
		}
|	STRING
		{
			MACHINE_UNIT mu;
			mu.lit = $1.getLit().substr(1, $1.getLit().length() - 2);
			mu.udt = UDT_LIT;
			CProgram::m_pyyUnits->push_back(mu);
		}
;

params:
	value COMMA params
		{ _FOUND_PARAM; }
|	value
		{ _FOUND_PARAM; }
|	/* No parameters. */
		{ }
;

function_identifier_bare:
	IDENTIFIER
|	IDENTIFIER DOT IDENTIFIER
		{ $$ = $1.getLit() + _T(".") + $3.getLit(); }
;

function_identifier:
	IDENTIFIER
		{
			/* Check for redirected functions. */
			std::map<STD_NATURAL_STRING, STD_NATURAL_STRING>::iterator i =
				CProgram::m_redirects.find($1.getLit());
			if (i != CProgram::m_redirects.end())
			{
				STD_NATURAL_STRING str = i->second;
				const STD_NATURAL_STRING::size_type pos = str.find(_T('.'));
				if (pos != STD_NATURAL_STRING::npos)
				{
					/* It's a function of the form x.y */
					addInclusion(str.substr(0, pos) + _T(".prg"));
					$$ = str.substr(pos + 1);
				}
				else
				{
					$$ = str;
				}
			}
		}
|	IDENTIFIER DOT IDENTIFIER
		{ addInclusion($1.getLit() + _T(".prg")); $$ = $3; }
;

function:
	function_identifier
		{ CProgram::m_params.push_back(0); }
	LPARAN params RPARAN
		{
			MACHINE_FUNC pFunc = NULL;
			if (CProgram::m_functions.count($1.getLit()))
			{
				pFunc = CProgram::m_functions[$1.getLit()];
			}
			else
			{
				MACHINE_UNIT mu;
				mu.udt = UDT_ID;
				mu.lit = $1.getLit();
				mu.num = -1;
				CProgram::m_pyyUnits->push_back(mu);
				_FOUND_PARAM;
				pFunc = CProgram::methodCall;
			}
			_MACHINE_UNIT(pFunc, CProgram::m_params.back());
			CProgram::m_params.pop_back();
		}
;

operator:
	XOR_ASSIGN
|	OR_ASSIGN
|	AND_ASSIGN
|	RS_ASSIGN
|	LS_ASSIGN
|	SUB_ASSIGN
|	ADD_ASSIGN
|	MOD_ASSIGN
|	DIV_ASSIGN
|	MUL_ASSIGN
|	POW_ASSIGN
|	ASSIGN
|	LOR
|	LAND
|	OR
|	XOR
|	AND
|	IEQ
|	EQ
|	GTE
|	LTE
|	GT
|	LT
|	RS
|	LS
|	SUB
|	ADD
|	MOD
|	DIV
|	MUL
|	POW
|	NOT
|	NEG
|	INC
|	DEC
;

operators:
	INC identifier %prec PREF_INC
		{ _MACHINE_UNIT(operators::prefixIncrement, 1); }
|	identifier INC %prec POST_INC
		{ _MACHINE_UNIT(operators::postfixIncrement, 1); }
|	DEC identifier %prec PREF_DEC
		{ _MACHINE_UNIT(operators::prefixDecrement, 1); }
|	identifier DEC %prec POST_DEC
		{ _MACHINE_UNIT(operators::postfixDecrement, 1); }
|	SUB value %prec NEG
		{ _MACHINE_UNIT(operators::unaryNegation, 1); }
|	NOT value
		{ _MACHINE_UNIT(operators::lnot, 1); }
|	identifier XOR_ASSIGN value
		{ _MACHINE_UNIT(operators::xor_assign, 2); }
|	identifier OR_ASSIGN value
		{ _MACHINE_UNIT(operators::or_assign, 2); }
|	identifier AND_ASSIGN value
		{ _MACHINE_UNIT(operators::and_assign, 2); }
|	identifier RS_ASSIGN value
		{ _MACHINE_UNIT(operators::rs_assign, 2); }
|	identifier LS_ASSIGN value
		{ _MACHINE_UNIT(operators::ls_assign, 2); }
|	identifier SUB_ASSIGN value
		{ _MACHINE_UNIT(operators::sub_assign, 2); }
|	identifier ADD_ASSIGN value
		{ _MACHINE_UNIT(operators::add_assign, 2); }
|	identifier MOD_ASSIGN value
		{ _MACHINE_UNIT(operators::mod_assign, 2); }
|	identifier DIV_ASSIGN value
		{ _MACHINE_UNIT(operators::div_assign, 2); }
|	identifier MUL_ASSIGN value
		{ _MACHINE_UNIT(operators::mul_assign, 2); }
|	identifier POW_ASSIGN value
		{ _MACHINE_UNIT(operators::pow_assign, 2); }
|	identifier ASSIGN value
		{ _MACHINE_UNIT(operators::assign, 2); }
|	value LOR value
		{ _MACHINE_UNIT(operators::lor, 2); }
|	value LAND value
		{ _MACHINE_UNIT(operators::land, 2); }
|	value OR value
		{ _MACHINE_UNIT(operators::bor, 2); }
|	value XOR value
		{ _MACHINE_UNIT(operators::bxor, 2); }
|	value AND value
		{ _MACHINE_UNIT(operators::band, 2); }
|	value IEQ value
		{ _MACHINE_UNIT(operators::ieq, 2); }
|	value EQ value
		{ _MACHINE_UNIT(operators::eq, 2); }
|	value GTE value
		{ _MACHINE_UNIT(operators::gte, 2); }
|	value LTE value
		{ _MACHINE_UNIT(operators::lte, 2); }
|	value GT value
		{ _MACHINE_UNIT(operators::gt, 2); }
|	value LT value
		{ _MACHINE_UNIT(operators::lt, 2); }
|	value RS value
		{ _MACHINE_UNIT(operators::rs, 2); }
|	value LS value
		{ _MACHINE_UNIT(operators::ls, 2); }
|	value SUB value
		{ _MACHINE_UNIT(operators::sub, 2); }
|	value ADD value
		{ _MACHINE_UNIT(operators::add, 2); }
|	value MOD value
		{ _MACHINE_UNIT(operators::mod, 2); }
|	value DIV value
		{ _MACHINE_UNIT(operators::div, 2); }
|	value MUL value
		{ _MACHINE_UNIT(operators::mul, 2); }
|	value POW value
		{ _MACHINE_UNIT(operators::pow, 2); }
|	value QUESTION value COLON value %prec CONDITIONAL
		{ _MACHINE_UNIT(operators::tertiary, 3); }
;

line_terminator:
	SEMICOLON
|	LCURL
		{
			_END_LINE;
			MACHINE_UNIT mu;
			mu.udt = UDT_OPEN;
			CProgram::m_pyyUnits->push_back(mu);
		}
|	RCURL
		{
			_END_LINE;
			MACHINE_UNIT mu;
			mu.udt = UDT_CLOSE;
			/* Find the corresponding opening brace. */
			POS i = CProgram::m_pyyUnits->end() - 1;
			int depth = 0;
			for (; i != CProgram::m_pyyUnits->begin(); --i)
			{
				if ((i->udt & UDT_OPEN) && (depth++ == 0))
				{
					unsigned long *const pLines = (unsigned long *)&mu.num;
					pLines[0] = i - CProgram::m_pyyUnits->begin();
					if ((i - 1)->udt & UDT_FUNC)
					{
						if ((i - 1)->func == CProgram::forLoop)
						{
							CONST_POS j = CProgram::m_yyFors.back().begin();
							for (; j != CProgram::m_yyFors.back().end(); ++j)
							{
								CProgram::m_pyyUnits->push_back(*j);
							}
							CProgram::m_yyFors.pop_back();
						}
						else if ((i - 1)->func == CProgram::skipMethod)
						{
							g_methods.pop_back();
						}
						else if ((i - 1)->func == CProgram::skipClass)
						{
							MACHINE_UNIT &mu = *(CProgram::m_pyyUnits->end() - 1);
							if ((mu.udt & UDT_FUNC) && (mu.func == CProgram::skipMethod) && !(CProgram::m_pyyUnits->back().udt & UDT_OPEN))
							{
								g_pClass->second.methods.back().first.i = NAMED_METHOD::m_methods.back().i = 0xffffff;
								g_methods.pop_back();
							}
							g_pClass = NULL;
						}
					}
					i->num = CProgram::m_pyyUnits->size();
					for (; i != CProgram::m_pyyUnits->begin(); --i)
					{
						if ((i->udt & UDT_LINE) && (++depth == 3)) break;
					}
					pLines[1] = i - CProgram::m_pyyUnits->begin() + 1;
					break;
				}
				else if (i->udt & UDT_CLOSE) --depth;
			}
			CProgram::m_pyyUnits->push_back(mu);
		}
;

line_terminators:
	line_terminator line_terminators
|	line_terminator
;

finale:
	line_terminators
		{
			_END_LINE;
			if (CProgram::m_pyyUnits->size() > 1)
			{
				MACHINE_UNIT &mu = *(CProgram::m_pyyUnits->end() - 1);
				if (g_pClass && (mu.udt & UDT_FUNC) && (mu.func == CProgram::skipMethod) && !(CProgram::m_pyyUnits->back().udt & UDT_OPEN))
				{
					g_pClass->second.methods.back().first.i = NAMED_METHOD::m_methods.back().i = 0xffffff;
					g_methods.pop_back();
				}
			}
		}
;

method_param:
	IDENTIFIER tdc
;

method_params:
	method_param COMMA method_params
		{ g_methods.back()[$1.getLit()] = g_methods.back().size(); }
|	method_param
		{ g_methods.back()[$1.getLit()] = g_methods.back().size(); }
|	/* No parameters. */
		{ }
;

method_name:
	IDENTIFIER
|	IDENTIFIER COLON COLON method_name
		{ $$ = $1.getLit() + _T("::") + $4.getLit(); }
|	method_name operator
;

method:
	METHOD method_name LPARAN
		{ g_methods.push_back(std::map<STD_NATURAL_STRING, int>()); }
	method_params
		{
			const STD_NATURAL_STRING name = (g_pClass ? (g_pClass->first + _T("::")) : _T("")) + $2.getLit();
			if (NAMED_METHOD::locate(name, g_methods.back().size(), false))
			{
				char str[255];
				itoa(g_methods.back().size(), str, 10);
				char line[255];
				itoa(g_lines + 1, line, 10);
				CProgram::debugger(STD_NATURAL_STRING(_T("Line ")) + line + _T(": Method \"") + name + _T("\" with a parameter count of ") + str + _T(" already exists."));
			}
			else
			{
				const STD_NATURAL_STRING::size_type pos = name.find(_T("::"));
				if (!g_pClass && (pos != STD_NATURAL_STRING::npos))
				{
					const STD_NATURAL_STRING clsName = name.substr(0, pos);
					const STD_NATURAL_STRING method = name.substr(pos + 2);
					LPNAMED_METHOD p = NAMED_METHOD::locate(name, g_methods.back().size(), true);
					if (p)
					{
						(*CProgram::m_pClasses)[clsName].locate(method, g_methods.back().size(), CV_PRIVATE)->i =
							p->i = CProgram::m_pyyUnits->end() - CProgram::m_pyyUnits->begin();
					}
					else
					{
						char str[255];
						itoa(g_methods.back().size(), str, 10);
						char line[255];
						itoa(g_lines + 1, line, 10);
						CProgram::debugger(STD_NATURAL_STRING(_T("Line ")) + line + _T(": Class \"") + clsName + _T("\" has no method \"") + method + _T("\" with a parameter count of ") + str + _T("."));
					}
				}
				else
				{
					NAMED_METHOD method;
					method.name = name;
					method.params = g_methods.back().size();
					method.i = CProgram::m_pyyUnits->end() - CProgram::m_pyyUnits->begin();
					NAMED_METHOD::m_methods.push_back(method);
					if (g_pClass)
					{
						method.name = $2.getLit();
						g_pClass->second.methods.push_back(std::pair<NAMED_METHOD, CLASS_VISIBILITY>(method, g_vis));
					}
				}
			}
			_MACHINE_UNIT(CProgram::skipMethod, 0);
			CProgram::m_pyyUnits->back().lit = name;
			CProgram::m_pyyUnits->back().num = g_methods.back().size();
		}
	RPARAN
;

for_loop_value:
	value
|	/* Empty section. */
		{ }
;

for_loop_value_centre:
	value
|	/* Empty section. */
		{
			MACHINE_UNIT mu;
			mu.udt = UDT_NUM;
			mu.num = 1;
			CProgram::m_pyyUnits->push_back(mu);
		}
;

for_loop:
	FOR LPARAN for_loop_value
		{ _END_LINE; }
	SEMICOLON for_loop_value_centre SEMICOLON
		{
			g_yyOldUnits = CProgram::m_pyyUnits;
			CProgram::m_yyFors.push_back(MACHINE_UNITS());
			CProgram::m_pyyUnits = &CProgram::m_yyFors.back();
		}
	for_loop_value
		{
			_END_LINE;
			CProgram::m_pyyUnits = g_yyOldUnits;
			_MACHINE_UNIT(CProgram::forLoop, 1);
		}
	RPARAN
;

return_val:
	RETURN value
		{ _MACHINE_UNIT(CProgram::returnVal, 1); }
;

inherit_class:
	IDENTIFIER
		{ g_pClass->second.inherits.push_back($1.getLit()); }
;

class_list:
	inherit_class COMMA class_list
|	inherit_class
;

inherits:
	COLON class_list
|	/* Inherits nothing. */
		{ }
;

class_declarator:
	CLASS
		{ g_vis = CV_PRIVATE; }
|	STRUCT
		{ g_vis = CV_PUBLIC; }
;

class:
	class_declarator IDENTIFIER
		{
			g_pClass = &*CProgram::m_pClasses->insert(std::map<STD_NATURAL_STRING, tagClass>::value_type($2.getLit(), tagClass())).first;
			_MACHINE_UNIT(CProgram::skipClass, 0);
			CProgram::m_pyyUnits->back().num = g_vis;
		}
	inherits
;

class_member:
	IDENTIFIER tdc
		{
			if (g_pClass)
			{
				g_pClass->second.members.push_back(std::pair<STD_NATURAL_STRING, CLASS_VISIBILITY>($1.getLit(), g_vis));
			}
		}
;

var_list:
	class_member COMMA var_list
|	class_member
;

class_members:
	VAR var_list
;

inclusion:
	INCLUDE STRING
		{ addInclusion($2.getLit().substr(1, $2.getLit().length() - 2)); }
|	INCLUDE LPARAN STRING RPARAN
		{ addInclusion($3.getLit().substr(1, $3.getLit().length() - 2)); }
|	INCLUDE LPARAN value RPARAN
		{ _MACHINE_UNIT(CProgram::runtimeInclusion, 1); }
;

redirection:
	REDIRECT LPARAN function_identifier_bare COMMA function_identifier_bare RPARAN
		{ CProgram::addRedirect($3.getLit(), $5.getLit()); }
|	REDIRECT LPARAN STRING COMMA STRING RPARAN
		{
			CProgram::addRedirect(
				lcase($3.getLit().substr(1, $3.getLit().length() - 2)),
				lcase($5.getLit().substr(1, $5.getLit().length() - 2))
			);
		}
;

kill_redirection:
	KILL_REDIRECT LPARAN function_identifier_bare RPARAN
		{ CProgram::removeRedirect($3.getLit()); }
|	KILL_REDIRECT LPARAN STRING RPARAN
		{ CProgram::removeRedirect(lcase($3.getLit().substr(1, $3.getLit().length() - 2))); }
;

clear_redirections:
	KILL_ALL_REDIRECTS
		{ CProgram::clearRedirects(); }
|	KILL_ALL_REDIRECTS LPARAN RPARAN
		{ CProgram::clearRedirects(); }
;

statement:
	return_val
|	method
|	class
|	class_members
|	PRIVATE COLON
		{
			MACHINE_UNIT mu;
			mu.udt = UNIT_DATA_TYPE(UDT_ID | UDT_NUM);
			mu.num = g_vis = CV_PRIVATE;
			CProgram::m_pyyUnits->push_back(mu);
		}
|	PUBLIC COLON
		{
			MACHINE_UNIT mu;
			mu.udt = UNIT_DATA_TYPE(UDT_ID | UDT_NUM);
			mu.num = g_vis = CV_PUBLIC;
			CProgram::m_pyyUnits->push_back(mu);
		}
|	inclusion
|	redirection
|	kill_redirection
|	clear_redirections
|	for_loop
|	value
;

line:
	statement finale
|	line_terminators statement finale
;

begin:
	/* Empty. */
|	line begin
|	statement
;

%%

#include "lex.yy.c"
#include "../../tkCommon/strings.h"
LPMACHINE_UNITS g_yyOldUnits = NULL;
std::deque<std::map<STD_NATURAL_STRING, int> > g_methods;
std::map<STD_NATURAL_STRING, tagClass>::value_type *g_pClass = NULL;
CLASS_VISIBILITY g_vis = CV_PRIVATE;

// Include a file, but don't allow the same file to be included twice.
inline void addInclusion(const STD_NATURAL_STRING file)
{
	std::vector<STD_NATURAL_STRING>::const_iterator i = CProgram::m_pInclusions->begin();
	for (; i != CProgram::m_pInclusions->end(); ++i)
	{
		if (*i == file) return;
	}
	CProgram::m_pInclusions->push_back(file);
}
