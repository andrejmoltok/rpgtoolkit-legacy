Attribute VB_Name = "CommonFont"
'All contents copyright 2003, 2004, Christopher Matthews or Contributors
'All rights reserved.  YOU MAY NOT REMOVE THIS NOTICE.
'Read LICENSE.txt for licensing info

Option Explicit

Public currentFontName As String         'current font filename
'Font Editor
Public char(7, 255) As String
Public fontMem(8, 8) As Long
Public currentFont(100, 100) As Long
Public currentX As Long, currentY As Long
Public whichChar As Long
Public Bold As Long
Public Italics As Long
Public Underline As Long
Public fName As String


'last used font attribs...
Type fontAttribs
    name As String  'font name
    size As Long    'size
    Bold As Boolean 'bold?
    Italics As Boolean  'italicized?
    Underline As Boolean    'underlined?
End Type

Public MsgBoxAttribs As fontAttribs   'current font set to the message box
Private ScreenAttribs As fontAttribs   'current font set to the display area

Public Declare Function BeginPath Lib "gdi32" (ByVal hdc As Long) As Long
Public Declare Function EndPath Lib "gdi32" (ByVal hdc As Long) As Long
Public Declare Function StrokePath Lib "gdi32" (ByVal hdc As Long) As Long
Public Declare Function StrokeAndFillPath Lib "gdi32" (ByVal hdc As Long) As Long

Public Declare Function GetStockObject Lib "gdi32" (ByVal nIndex As Long) As Long
'stock objects
Public Const BLACK_BRUSH = 4
Public Const BLACK_PEN = 7
Public Const DKGRAY_BRUSH = 3
Public Const GRAY_BRUSH = 2
Public Const WHITE_PEN = 6
Public Const SYSTEM_FONT = 13


Public Declare Function SetBkMode Lib "gdi32" (ByVal hdc As Long, ByVal nBkMode As Long) As Long
Public Const TRANSPARENT = 1
Public Const OPAQUE = 2

Sub drawGDIText(ByVal stringin As String, ByVal X As Double, ByVal Y As Double, ByVal coltxt As Long, ByVal sizex As Long, ByVal sizey As Long, ByVal fontFace As String, ByVal Bold As Boolean, ByVal Italics As Boolean, ByVal Underline As Boolean, ByVal hdc As Long, Optional ByVal centred As Boolean = False, Optional ByVal outlined As Boolean = False)
    On Error Resume Next
               
    Dim Length As String
    Length = Len(stringin$)
    
    Dim theAttrib As fontAttribs
    theAttrib.name = fontFace
    theAttrib.size = sizey
    theAttrib.Italics = Italics
    theAttrib.Bold = Bold
    theAttrib.Underline = Underline
        
    Call SetBkMode(hdc, TRANSPARENT)
    Dim hFontNew As Long
    Dim hFontOld As Long
    hFontOld = SetDeviceFont(hdc, theAttrib, hFontNew, centred)
    Call SetTextColor(hdc, coltxt)
        
    Dim xx As Long
    Dim yy As Long
    xx = (X * sizex) - sizex
    yy = (Y - 1) * sizey
    
    Dim hOldBrush As Long
    Dim hNewBrush As Long
    hNewBrush = CreateSolidBrush(coltxt)
    hOldBrush = SelectObject(hdc, hNewBrush)
       
    If outlined Then
        Call BeginPath(hdc)
        Call TextOut(hdc, xx, yy, stringin$, Length)
        Call EndPath(hdc)
        
        Call SetBkColor(hdc, coltxt)
        Call SetBkMode(hdc, OPAQUE)
        Call StrokeAndFillPath(hdc)
    Else
        Call TextOut(hdc, xx, yy, stringin$, Length)
    End If
    
    Call SelectObject(hdc, hOldBrush)
    Call DeleteObject(hNewBrush)
    
    'now select the old font back onto this surface
    Call SelectObject(hdc, hFontOld)
    Call DeleteObject(hFontNew)
End Sub



Sub antialias()
    'antialiases font
    On Error GoTo ErrorHandler
    Dim X As Long, Y As Long
    For X = 1 To currentX - 1
        For Y = 1 To currentY - 1
            If currentFont(X, Y) = 0 Then
                If currentFont(X, Y + 1) = 1 And _
                   currentFont(X + 1, Y) = 1 Then
                    currentFont(X, Y) = 2
                End If
                If currentFont(X - 1, Y) = 1 And _
                    currentFont(X, Y + 1) = 1 Then
                    currentFont(X, Y) = 2
                End If
                If currentFont(X, Y - 1) = 1 And _
                    currentFont(X + 1, Y) = 1 Then
                    currentFont(X, Y) = 2
                End If
                If currentFont(X, Y + 1) = 1 And _
                    currentFont(X - 1, Y) = 1 Then
                    currentFont(X, Y) = 2
                End If
            End If
        Next Y
    Next X

    Exit Sub
'Begin error handling code:
ErrorHandler:
    Call HandleError
    Resume Next
End Sub

Sub fontbold()
    On Error Resume Next
    ReDim fbuff(100, 100)
    Dim X As Long, Y As Long
    For X = 1 To currentX
        For Y = 1 To currentY
            fbuff(X, Y) = currentFont(X, Y)
            If fbuff(X, Y) = 0 Then
                If currentFont(X - 1, Y) = 1 Then fbuff(X, Y) = 1
            End If
        Next Y
    Next X
    For X = 1 To currentX
        For Y = 1 To currentY
            currentFont(X, Y) = fbuff(X, Y)
        Next Y
    Next X
    currentX = currentX + 1
End Sub

Sub fontitalics()
    On Error Resume Next
    ReDim fbuff(100, 100) As Long
    Dim X As Long, Y As Long
    For X = 1 To currentX
        For Y = 1 To currentY
            If Y <= Int(currentY / 2) Then
                fbuff(X + 1, Y) = currentFont(X, Y)
            Else
                fbuff(X, Y) = currentFont(X, Y)
            End If
        Next Y
    Next X
    For X = 1 To currentX
        For Y = 1 To currentY
            currentFont(X, Y) = fbuff(X, Y)
        Next Y
    Next X
    currentX = currentX + 1
End Sub

Sub fontunderline()
    On Error Resume Next
    Dim X As Long
    For X = 1 To currentX
        currentFont(X, currentY + 2) = 1
    Next X
    currentY = currentY + 2
End Sub

Sub loadFont(filename$)
    On Error Resume Next
    'loadingfont.Show
    Dim num As Long, f As String, a As String, t As Long, numi As Long
    num = FreeFile
    f$ = PakLocate(filename$)
    Open f$ For Input As #num
        Input #num, a$
        If UCase$(a$) <> "RPGTLKIT FONT" Then MsgBox "Unrecognised file format!", , "Open Font": Close #num:  Exit Sub
        Input #num, a$    'Version
        Input #num, a$    'Subver
        For t = 0 To 255
            For numi = 0 To 7
                Input #num, a$
                char$(numi, t) = toBinary(val(a$))
            Next numi
            'loadingfont.progress.Line (0, 0)-(t, 300), vbqbcolor(9), BF
        Next t
    Close #num
End Sub

Sub putchar(ByVal stringin$, ByVal X As Double, ByVal Y As Double, ByVal coltxt As Long, ByVal sizex As Long, ByVal sizey As Long, ByVal hdc As Long)
    On Error Resume Next
    Dim chari As Long
    
    chari = Asc(stringin$)
    Call resize(chari, sizex, sizey)
    If Bold = 1 Then Call fontbold
    If Italics = 1 Then Call fontitalics
    If Underline = 1 Then Call fontunderline
    Dim xx As Long, yy As Long, v As Long, aa As Long
    For xx = 1 To currentX
        For yy = 1 To currentY
            v = currentFont(xx, yy)
            If v = 1 Then v = 15
            If v = 2 Then v = 8
            'If UCase$(place$) = "MWIN" Then
                If v = 15 Then
                    'aa = setpixelV(vbpichdc(messagewindow.win), xx + xx - 1, y + yy - 1, coltxt)
                    'pic.PSet (x + xx - 1, y + yy - 1), coltxt
                    aa = SetPixelV(hdc, X + xx - 1, Y + yy - 1, coltxt)
                End If
                If v = 8 Then
                    Dim rd As Long, gn As Long, bl As Long
                    rd = red(coltxt)
                    gn = green(coltxt)
                    bl = blue(coltxt)
                    rd = rd - 128
                    gn = gn - 128
                    bl = bl - 128
                    'If vbPicHDC(pic) = vbpichdc(messagewindow.win) Then
                    '    messagewindow.win.PSet (x + xx - 1, y + yy - 1), RGB(rd, bn, bl)
                    'Else
                    '    pic.PSet (x + xx - 1, y + yy - 1), RGB(rd, bn, bl)
                    'End If
                    aa = SetPixelV(hdc, X + xx - 1, Y + yy - 1, RGB(rd, gn, bl))
                End If
            'End If
            'If UCase$(place$) = "BOARD" Then
            '    'call vbPicAutoRedraw(mainForm.boardform,false)
            '    If v = 15 Then
            '        'call vbPicAutoRedraw(mainForm.boardform, true)
            '        Call drawPixel(mainForm.boardform, (x + xx - 1), (y + yy - 1), coltxt)
            '        'aa = setpixelV(vbpichdc(mainForm.boardform), x + xx - 1, y + yy - 1, coltxt)
            '        'mainForm.boardform.PSet (x + xx - 1, y + yy - 1), coltxt
            '    End If
            '    If v = 8 Then
            '        rd = red(coltxt)
            '        gn = green(coltxt)
            '        bl = blue(coltxt)
            '        rd = rd - 128
            '        gb = gn - 128
            '        bl = bl - 128
            '        Call drawPixel(mainForm.boardform, (x + xx - 1), (y + yy - 1), RGB(rd, gn, bl))
            '    End If
            '    'call vbPicAutoRedraw(mainForm.boardform, true)
            'End If
            'If UCase$(place$) = "MWIN" Then If v = 15 Then mainForm.boardform.PSet (x + xx - 1, y + yy - 1), vbqbcolor(0)
            'If UCase$(place$) = "PREVIEW" Then If v = 15 Then fontedit.preview.PSet (x + xx - 1, y + yy - 1), coltxt
        Next yy
    Next xx
    
End Sub

Sub putText(ByVal stringin As String, ByVal X As Double, ByVal Y As Double, ByVal coltxt As Long, ByVal sizex As Long, ByVal sizey As Long, ByVal hdc As Long)
    On Error Resume Next
            
    Call SetBkMode(hdc, TRANSPARENT)
      
    Dim Length As Long
    Length = Len(stringin$)
    Dim dx As Double
    dx = X
    'If staticText = 1 Then
    '    pic.AutoRedraw = True
    'Else
    '    If vbPicHDC(pic) <> vbpichdc(mainForm.boardform) Then
    '        pic.AutoRedraw = False
    '    End If
    'End If
    
    Dim useTTFont As Boolean
    If UCase$(GetExt(fontName$)) = "FNT" Then
        useTTFont = False
    Else
        useTTFont = True
    End If
    If useTTFont Then
        'using a true type font!
        'pic.AutoRedraw = True
        Dim Bold As Boolean, italic As Boolean, Underline As Boolean
        If Bold = 1 Then Bold = True
        If Italics = 1 Then italic = True
        If Underline = 1 Then Underline = True
        
        Dim theAttrib As fontAttribs
        theAttrib.name = fontName$
        theAttrib.size = sizey
        theAttrib.Italics = italic
        theAttrib.Bold = Bold
        theAttrib.Underline = Underline
        
        Dim hFontNew As Long, hFontOld As Long
        hFontOld = SetDeviceFont(hdc, theAttrib, hFontNew)
        Dim a As Long
        a = SetTextColor(hdc, coltxt)
        
        Dim xx As Long, yy As Long
        xx = (dx * sizex) - sizex
        yy = (Y - 1) * sizey
        a = TextOut(hdc, xx, yy, stringin$, Len(stringin$))
        Call SelectObject(hdc, hFontOld)
        Call DeleteObject(hFontNew)
    Else
        'If vbPicHDC(pic) <> vbpichdc(mainForm.boardform) Then
        '    pic.AutoRedraw = False
        'End If
        Dim t As Long, part As String
        For t = 1 To Length
            xx = (dx * sizex) - sizex
            part$ = Mid$(stringin$, t, 1)
            Call putchar(part$, xx, (Y - 1) * sizey, coltxt, sizex, sizey, hdc)
            'If staticText = 1 Then
            '    pic.Refresh
            'End If
            'If UCase$(place$) = "MWIN" Then messagewindow.win.Refresh
            dx = dx + 1
        Next t
    End If
    
End Sub

Sub resize(ByVal charnum As Long, ByVal X As Long, ByVal Y As Long)
    On Error Resume Next
    ReDim fbuff(8, 8) As Long
    
    If X > 100 Then X = 100: If Y > 100 Then Y = 100
    currentX = X: currentY = Y
    Dim xx As Long, yy As Long, colb As String, v As Long
    
    For yy = 1 To 8
        For xx = 1 To 8
            colb$ = Mid$(char$(yy - 1, charnum), xx, 1)
            v = val(colb$)
            fbuff(xx, yy) = v
            'If v = 1 Then v = 15
            'fontedit.fontmap.PSet (xx + 100, yy), vbqbcolor(v)
        Next xx
    Next yy
    
    Dim corx As Long, cory As Long
    For xx = 1 To X
        For yy = 1 To Y
            corx = Int((8 / X) * xx)
            cory = Int((8 / Y) * yy)
            currentFont(xx, yy) = fbuff(corx, cory)
            'If currentfont(xx, yy) = 1 Then fontedit.fontmap.PSet (xx, yy) Else fontedit.fontmap.PSet (xx, yy), vbqbcolor(15)
        Next yy
    Next xx
            
    'Call antialias
End Sub

Sub saveFont(filename$)
    On Error Resume Next
    'loadingfont.Show
    'loadingfont.Caption = "Saving Font..."
    Dim num As Long, t As Long, numi As Long, decnum As Long
    num = FreeFile
    Open filename$ For Output As #num
'FIXIT: Print method has no Visual Basic .NET equivalent and will not be upgraded.         FixIT90210ae-R7593-R67265
        Print #num, "RPGTLKIT FONT"
'FIXIT: Print method has no Visual Basic .NET equivalent and will not be upgraded.         FixIT90210ae-R7593-R67265
        Print #num, "2" 'Version
'FIXIT: Print method has no Visual Basic .NET equivalent and will not be upgraded.         FixIT90210ae-R7593-R67265
        Print #num, "0" 'Subver
        For t = 0 To 255
            For numi = 0 To 7
                decnum = toDecimal(char$(numi, t))
'FIXIT: Print method has no Visual Basic .NET equivalent and will not be upgraded.         FixIT90210ae-R7593-R67265
                Print #num, decnum
            Next numi
            'loadingfont.progress.Line (0, 0)-(t, 300), vbqbcolor(9), BF
        Next t
    Close #num
    'Unload loadingfont
End Sub

Function SetDeviceFont(ByVal hdc As Long, ByRef theAttribs As fontAttribs, ByRef hFontNew As Long, Optional ByVal centred As Boolean = False) As Long
    'set the font for a device
    'returns a handle to the old font.
    'also returns handle of new font in hFontNew
    On Error Resume Next
    
    Call SetBkMode(hdc, TRANSPARENT)
    
    Dim fnt As Long
    Dim newFnt As Long
    fnt = SelectFontToDevice(theAttribs.name, hdc, theAttribs.size, newFnt, theAttribs.Italics, theAttribs.Bold, theAttribs.Underline, centred)
    hFontNew = newFnt
    SetDeviceFont = fnt
End Function

Function toBinary(ByVal decimala As Long) As String
    On Error GoTo ErrorHandler
    Dim binNum As String, t As Long, Length As Long, newNum As String, part As String
    Dim remain As Long
    binNum$ = ""
    For t = 1 To 8
        remain = decimala Mod 2
        decimala = Int(decimala / 2)
        binNum$ = str$(remain) + binNum$
    Next t
    Length = Len(binNum$)
    newNum$ = ""
    For t = 1 To Length
        part$ = Mid$(binNum$, t, 1)
        If part$ <> " " Then newNum$ = newNum$ + part$
    Next t
    toBinary$ = newNum$

    Exit Function

'Begin error handling code:
ErrorHandler:
    Call HandleError
    Resume Next
End Function

Function toDecimal(ByVal bin As String) As Long
    On Error Resume Next
    Dim Length As Long, toadd As Long, addon As String, t As Long, dec As Long, part As String
    Length = Len(bin$)
    If Length < 8 Then
        toadd = 8 - Length
        For t = 1 To toadd
            addon$ = addon$ + "0"
        Next t
        bin$ = addon$ + bin$
    End If
    dec = 0
    For t = 1 To 8
        part$ = Mid$(bin$, t, 1)
        dec = dec * 2 + val(part$)
    Next t
    toDecimal = dec
End Function

